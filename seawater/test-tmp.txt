# TEST MODULE     = 'PTMP'
    T = np.array([[ 0,  0,  0,  0,  0,  0], \
            [10, 10, 10, 10, 10, 10], \
            [20, 20, 20, 20, 20, 20], \
            [30, 30, 30, 30, 30, 30], \
            [40, 40, 40, 40, 40, 40]])
    T = T / T68conv
    S = np.array([[25, 25, 25, 35, 35, 35], \
            [25, 25, 25, 35, 35, 35], \
            [25, 25, 25, 35, 35, 35], \
            [25, 25, 25, 35, 35, 35], \
            [25, 25, 25, 35, 35, 35]])
    P = np.array([[0, 5000, 10000, 0, 5000, 10000], \
            [0, 5000, 10000, 0, 5000, 10000], \
            [0, 5000, 10000, 0, 5000, 10000], \
            [0, 5000, 10000, 0, 5000, 10000], \
            [0, 5000, 10000, 0, 5000, 10000]])
    Pr = np.array([0, 0, 0, 0, 0, 0])
    UN_ptmp = np.array([[ 0, -0.3061, -0.9667,  0, -0.3856, -1.0974], \
                    [10,  9.3531,  8.4684, 10,  9.2906,  8.3643], \
                    [20, 19.0438, 17.9426, 20, 18.9985, 17.8654], \
                    [30, 28.7512, 27.4353, 30, 28.7231, 27.3851], \
                    [40, 38.4607, 36.9254, 40, 38.4498, 36.9023]])
    PT = sw.ptmp(S, T, P, Pr)*T68conv

# TEST MAIN MODULE SVAN
    submodules = 'dens dens0 smow seck pden'
    # test DATA FROM: Unesco Tech. Paper in Marine Sci. No. 44, p22
    s = np.array([0,     0,  0,     0, 35,    35, 35,   35])
    p = np.array([0, 10000,  0, 10000,  0, 10000,  0, 10000])
    t = np.array([0,     0, 30,    30,  0,     0, 30,    30]) / T68conv
    UN_svan = np.array([2749.54, 2288.61, 3170.58, 3147.85, \
                        0.0,    0.00,  607.14,  916.34])
    SVAN    = sw.svan(s, t, p)

# TEST MAIN MODULE SALRP
    # Data from Unesco 1983 p9
    R    = np.array([  1,       1.2,       0.65]) # cndr = R
    T    = np.array([ 15,        20,          5]) / T68conv
    P    = np.array([  0,      2000,       1500])
    Rt   = np.array([  1, 1.0568875, 0.81705885])
    UN_S = np.array([35, 37.245628,  27.995347])
    S    = sw.salt(R, T, P)

# TEST MAIN MODULE CP
    # DATA FROM POND AND PICKARD INTRO. DYNAMICAL OCEANOGRAPHY 2ND ED. 1986
    T     = np.array([[ 0,  0,  0,  0,  0,  0],
                   [10, 10, 10, 10, 10, 10],
                   [20, 20, 20, 20, 20, 20],
                   [30, 30, 30, 30, 30, 30],
                   [40, 40, 40, 40, 40, 40]]) / T68conv
    S     = np.array([[25, 25, 25, 35, 35, 35],
                   [25, 25, 25, 35, 35, 35],
                   [25, 25, 25, 35, 35, 35],
                   [25, 25, 25, 35, 35, 35],
                   [25, 25, 25, 35, 35, 35]])
    P     = np.array([[0, 5000, 10000, 0, 5000, 10000],
                   [0, 5000, 10000, 0, 5000, 10000],
                   [0, 5000, 10000, 0, 5000, 10000],
                   [0, 5000, 10000, 0, 5000, 10000],
                   [0, 5000, 10000, 0, 5000, 10000]])
    UN_cp = np.array([[4048.4,  3896.3,  3807.7,  3986.5,  3849.3,  3769.1],
                   [4041.8,  3919.6,  3842.3,  3986.3,  3874.7,  3804.4],
                   [4044.8,  3938.6,  3866.7,  3993.9,  3895.0,  3828.3],
                   [4049.1,  3952.0,  3883.0,  4000.7,  3909.2,  3844.3],
                   [4051.2,  3966.1,  3905.9,  4003.5,  3923.9,  3868.3]])
    CP    = sw.cp(S, T, P)

# TEST SUBMODULES ALPHA
    # DATA FROM MCDOUOGALL 1987
    s    = 40
    PT   = 10
    p    = 4000
    beta_lit  = 0.72088e-03
    alpha_lit = aonb_lit*beta_lit

    #fixme: add keywords and test here!
    # beta = beta(s,ptmp,p,'ptmp')
    # beta = beta(s,ptmp,p,'temp')
    # beta = beta(s,ptmp,p)
    #
    # alpha = alpha(s,ptmp,p,'ptmp')
    # alpha = alpha(s,ptmp,p,'temp')
    # alpha = alpha(s,ptmp,p)
    #
    # aonb  = aonb( s,ptmp,p,'ptmp')
    # aonb  = aonb( s,ptmp,p,'temp')
    # aonb  = aonb( s,ptmp,p)

# TEST MAIN MODULES  SATO2 SATN2 SATAR
    # Data from Weiss 1970
    T      = np.array([[ -1, -1],
                    [ 10, 10],
                    [ 20, 20],
                    [ 40, 40]]) / T68conv
    S      = np.array([[ 20, 40],
                    [ 20, 40],
                    [ 20, 40],
                    [ 20, 40]])
    lit_O2 = np.array([[ 9.162, 7.984],
                    [ 6.950, 6.121],
                    [ 5.644, 5.015],
                    [ 4.050, 3.656]])
    lit_N2 =  np.array([[ 16.28, 14.01],
                     [ 12.64, 11.01],
                     [ 10.47,  9.21],
                     [  7.78,  6.95]])
    lit_Ar =  np.array([[ 0.4456, 0.3877],
                     [ 0.3397, 0.2989],
                     [ 0.2766, 0.2457],
                     [ 0.1986, 0.1794]])
    O2     = sw.satO2(S, T)
    N2     = sw.satN2(S, T)
    Ar     = sw.satAr(S, T)